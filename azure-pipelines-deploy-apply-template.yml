# Terraform apply template

parameters:
  # unique name of the job
  job_name: deploy_terraform
  # friendly name of the job
  display_name: 'Deploy with Terraform'
  # build pipeline artifact name
  artifact_name: 'SpaceGameWeb'
  # build branch
  build_branch: 'develop'
  # variable group to use
  variable_group_name: dev_configuration

jobs:
- deployment: ${{ parameters.job_name }}
  displayName: ${{ parameters.display_name }}
  pool:
    vmImage: 'ubuntu-latest'
  environment: $(target_environment)
  variables:
  - group: ${{parameters.variable_group_name}}
  - name: terraform_working_dir
    value: './terraform'
  - name: project_id
    value: '17c7e148-5259-4c50-a78a-221a3542498f' # 'Pipelines Demo'
  - name: build_pipeline_id
    value: '19' # 'tailspin-spacegame-web-build'
  - name: plan_pipeline_id
    value: '24' # 'tailspin-spacegame-web-deploy-plan'
  strategy:
    runOnce:
      deploy:
        steps:
        - task: DownloadPipelineArtifact@2
          # download build artifact
          inputs:
            buildType: 'specific'
            project: $(project_id) 
            definition: $(build_pipeline_id)
            runBranch: ${{ parameters.build_branch }}
            buildVersionToDownload: 'latest'
            artifactName: ${{ parameters.artifact_name }}
            itemPattern: '*.zip'
            targetPath: '$(Pipeline.Workspace)'
        - task: DownloadPipelineArtifact@2
          # download terraform plan
          inputs:
            buildType: 'specific'
            project: $(project_id) 
            definition: $(plan_pipeline_id)
            runBranch: ${{ parameters.build_branch }}
            buildVersionToDownload: 'latest'
            artifactName: tfplan_out
            itemPattern: '*.out'
            targetPath: '$(Pipeline.Workspace)'
        - task: TerraformCLI@0
          inputs:
            command: 'init'
            workingDirectory: '$(terraform_working_dir)'
            commandOptions: '-backend-config=resource_group_name=$(RES_GRP) -backend-config=storage_account_name=$(STORAGE_ACCT) -backend-config=container_name=tf-statefiles -backend-config=key=$(state.key) -backend-config=access_key=$(ACCESS_KEY) -no-color -input=false'
            backendType: 'azurerm'
        - task: TerraformCLI@0
          inputs:
            workingDirectory: '$(terraform_working_dir)'
            command: 'apply'
            environmentServiceName: '$(azure_subscription)'
            commandOptions: '-input=false -auto-approve -lock=true'
