trigger:
- '*'

pool:
  vmImage: 'ubuntu-16.04'
  demands:
    - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '2.1.505'
  usePipelineCaching: false
  NUGET_PACKAGES: $(Pipeline.Workspace)/Tailspin.SpaceGame.Web/packages

steps:
- task: Cache@2
  condition: eq(variables['usePipelineCaching'], true)
  inputs:
    key: 'nuget2 | "$(Agent.OS)" | "Tailspin.SpaceGame.Web/packages/packages.lock.json"'
    restoreKeys: |
      nuget2 | "$(Agent.OS)"
      nuget2
    path: $(NUGET_PACKAGES)
    cacheHitVar: NUGET_CACHE_RESTORED
    verbose: true
  displayName: Cache NuGet packages

- task: DotNetCoreInstaller@0
  displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  #condition: ne(variables['NUGET_CACHE_RESTORED'], true) # task required to recreate proejct
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: 'NuGetOrgProxy'
    includeNuGetOrg: true
    #feedsToUse: 'config'
    #nugetConfigPath: ./Tailspin.SpaceGame.Web/nuget.config

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()
