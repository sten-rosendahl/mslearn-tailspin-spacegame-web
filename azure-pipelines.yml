trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - azure-pipelines-deploy*.yml
pool:
  vmImage: 'ubuntu-16.04'
  demands:
    - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: '$(System.DefaultWorkingDirectory)/Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '2.1.505'
  usePipelineCaching: true
  useStaticSecurityScanning: false
  useOpenSourceScanning: true
  NUGET_PACKAGES: $(System.DefaultWorkingDirectory)/Tailspin.SpaceGame.Web/packages
  NPM_MODULES: $(System.DefaultWorkingDirectory)/node_modules

steps:
- task: Cache@2
  displayName: Cache NuGet packages
  condition: eq(variables['usePipelineCaching'], true)
  inputs:
    key: 'nuget4 | "$(Agent.OS)" | "packages.lock.json"'
    restoreKeys: |
      nuget4 | "$(Agent.OS)"
      nuget4
    path: $(NUGET_PACKAGES)
    cacheHitVar: NUGET_CACHE_RESTORED

- task: Cache@2
  displayName: Cache npm modules
  condition: eq(variables['usePipelineCaching'], true)
  inputs:
    key: 'npm | "$(Agent.OS)" | "package-lock.json"'
    restoreKeys: |
      npm | "$(Agent.OS)"
      npm
    path: $(NPM_MODULES)
    cacheHitVar: NPM_CACHE_RESTORED

- task: DotNetCoreInstaller@0
  displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: Npm@1
  displayName: 'Run npm install'
  condition: ne(variables['NPM_CACHE_RESTORED'], true)
  inputs:
    customRegistry: 'useFeed'
    customFeed: 'Pipelines Demo/ExternalProxies'
    #customRegistry: 'useNpmrc' # good option to use the same
    verbose: true

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp task'

- script: 'echo "$(Build.DefinitionName), $(Build.Buan index file?ldNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet dependencies'
  #condition: ne(variables['NUGET_CACHE_RESTORED'], true) # task required to recreate project.assets.json
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: 'Pipelines Demo/ExternalProxies'
    includeNuGetOrg: false
    #feedsToUse: 'config'
    nugetConfigPath: $(System.DefaultWorkingDirectory)/Tailspin.SpaceGame.Web/nuget.config
    restoreDirectory: $(NUGET_PACKAGES)

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Install ReportGenerator'
  inputs:
    command: custom
    custom: tool
    arguments: 'install --global dotnet-reportgenerator-globaltool'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*.Tests.csproj'

- script:
    reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
  displayName: 'Create code coverage report'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
- task: CmdLine@2
  displayName: 'Security static source code analysis'
  condition: eq(variables['useStaticSecurityScanning'], true)
  inputs:
    script: |
      echo Hello world

- task: CmdLine@2
  displayName: 'Open source scanning'
  condition: eq(variables['useOpenSourceScanning'], true)
  inputs:
    script: |
      echo Hello world

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    modifyOutputPath: true
    zipAfterPublish: true

- task: PublishPipelineArtifact@1
  inputs:
    path: '$(Pipeline.Workspace)/$(Build.ArtifactStagingDirectory)/$(buildConfiguration)/Tailspin.SpaceGame.Web'
    artifact: 'SpaceGameWeb'
    publishLocation: 'pipeline'
